name: Fresh CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        clean: true
        fetch-depth: 0
    
    - name: Verify repository content
      run: |
        echo "==== Verifying repository content ===="
        echo "Listing all test files:"
        find tests -name "test_*.py" | sort
        
        echo "==== Checking for deleted test files ===="
        if [ -f "tests/test_events_processor.py" ]; then
          echo "ERROR: tests/test_events_processor.py still exists!"
          exit 1
        fi
        if [ -f "tests/test_patchers_anthropic.py" ]; then
          echo "ERROR: tests/test_patchers_anthropic.py still exists!"
          exit 1
        fi
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: 'pyproject.toml'
        
    - name: Print Python info
      run: |
        echo "Python version:"
        python --version
        echo "Python location:"
        which python
        
    - name: Clean Python cache
      run: |
        echo "Cleaning Python cache files..."
        find . -type d -name __pycache__ -exec rm -rf {} + 2>/dev/null || true
        find . -type f -name "*.pyc" -delete
        find . -type f -name "*.pyo" -delete
        find . -type f -name "*.pyd" -delete
        find . -type d -name ".pytest_cache" -exec rm -rf {} + 2>/dev/null || true
        find . -type d -name ".ruff_cache" -exec rm -rf {} + 2>/dev/null || true
        find . -type d -name ".mypy_cache" -exec rm -rf {} + 2>/dev/null || true
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pytest pytest-cov pytest-asyncio build
        python -m pip install -e ".[dev,test]"
        
    - name: Verify installed packages
      run: |
        echo "Installed packages:"
        pip list
        
    - name: Run linters
      run: |
        pip install black isort ruff
        black --check .
        isort --check-only .
        ruff check .
      continue-on-error: true
        
    - name: Run tests
      run: |
        # List available test files first
        echo "Available test files:"
        find tests -name "test_*.py" | grep -v "test_events_processor.py" | grep -v "test_patchers_anthropic.py" | sort
        
        # Run pytest excluding the problematic files explicitly
        python -m pytest \
          --ignore=tests/test_events_processor.py \
          --ignore=tests/test_patchers_anthropic.py \
          -v --cov=src --cov-report=xml
        
    - name: Upload coverage
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
      continue-on-error: true

  integration-tests:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        clean: true
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pytest pytest-asyncio
        python -m pip install -e ".[dev,test]"
        
    - name: Run integration tests
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      run: |
        python -m pytest -v -m "integration" \
          --ignore=tests/test_events_processor.py \
          --ignore=tests/test_patchers_anthropic.py
      continue-on-error: true

  build:
    needs: [test, integration-tests]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        
    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        python -m pip install build twine
        
    - name: Build package
      run: python -m build
      
    - name: Check package
      run: twine check dist/*
        
    - name: Publish to PyPI
      if: startsWith(github.ref, 'refs/tags/v')
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      run: twine upload dist/* 
name: Publish to PyPI

on:
  release:
    types: [created]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        pip install .
        
    - name: Run tests
      run: |
        pip install -e ".[dev,test,security]"
        pytest
        
    - name: Security check
      run: |
        pip install bandit safety
        bandit -r src/
        safety check
        
    - name: Verify package metadata
      run: |
        # Explicitly install tomli first
        python -m pip install tomli
        
        # Create and run a simple verification script
        cat > verify_metadata.py << 'EOF'
        import sys
        from pathlib import Path

        # Try to use tomllib first, then fall back to tomli
        try:
            import tomllib
            print("Using tomllib")
            toml_parser = tomllib
        except ImportError:
            try:
                import tomli
                print("Using tomli")
                toml_parser = tomli
            except ImportError:
                print("Error: Neither tomllib nor tomli is available")
                sys.exit(1)

        try:
            with Path('pyproject.toml').open('rb') as f:
                config = toml_parser.load(f)
            
            # Print key info about the package
            print(f'Package: {config["project"]["name"]}')
            print(f'Version: {config["project"]["version"]}')
            print(f'Description: {config["project"]["description"]}')
            print('Metadata verification passed')
        except Exception as e:
            print(f'Error verifying metadata: {e}')
            sys.exit(1)
        EOF
        
        python verify_metadata.py
        
    - name: Build package
      run: python -m build
      
    - name: Check distribution
      run: twine check dist/*
      
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      run: twine upload dist/* 